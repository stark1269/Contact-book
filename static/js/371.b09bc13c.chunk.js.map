{"version":3,"file":"static/js/371.b09bc13c.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styled.jsx","redux/filter/selectors.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.jsx","components/ContactItem/ContactItem.styled.jsx","components/ContactItem/ContactItem.jsx","components/ContactList/ContactList.styled.jsx","components/ContactList/ContactList.jsx","components/FindContacts/FindContacts.styled.jsx","components/FindContacts/FindContacts.jsx","components/Section/Section.styled.jsx","components/Section/Section.jsx","pages/Contacts/Contacts.styled.jsx","pages/Contacts/Contacts.jsx"],"sourcesContent":["import { Form as FormikForm, Field as FormikField, ErrorMessage } from 'formik';\nimport styled from 'styled-components';\n\nexport const Form = styled(FormikForm)`\ndisplay: flex;\nflex-direction: column;\nalign-items: center;\ngap: 12px;\nmargin-bottom: 32px;\n`;\n\nexport const Label = styled.label`\ndisplay: flex;\nflex-direction: column;\ngap: 4px;\nfont-size: 18px;\nfont-weight: 500;\ncolor: #f5f5f583;\n`;\n\nexport const Input = styled(FormikField)`\npadding: 6px;\nfont-size: 22px;\nborder-radius: 6px;\n`;\n\nexport const Button = styled.button`\nwidth: 150px;\nfont-size: 22px;\nborder-radius: 6px;\nbackground-color: #606060;\ntransition: background-color 300ms linear, color 300ms linear;\n\n:hover {\n  background-color: #569271;\n  color: whitesmoke;\n}\n`;\n\nexport const Error = styled(ErrorMessage)`\ncolor: #ff00009a;\nfont-size: 18px;\n`;","export const selectFilter = state => state.filter;","import { createSelector } from \"@reduxjs/toolkit\";\nimport { selectFilter } from \"../filter/selectors\";\n\nexport const selectContacts = state => state.contacts;\nexport const selectContactsItems = state => state.contacts.items;\n\nexport const selectFilteredContacts = createSelector([selectContactsItems, selectFilter], (contacts, filter) => {\n  return contacts.filter(item => item.name.toLowerCase().includes(filter.toLowerCase()));\n});","import { Formik } from 'formik';\nimport { Form, Label, Input, Button, Error } from './ContactForm.styled';\nimport * as Yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { addContact } from 'redux/contacts/operations';\nimport Notiflix from \"notiflix\";\nimport { selectContactsItems } from 'redux/contacts/selectors';\n\nconst Schema = Yup.object({\n  name: Yup.string().min(3, 'Min of 3 chars').max(10, 'Max of 10 chars').required('Required'),\n  number: Yup.string().required('Required')\n    .matches(/^\\d{3}-\\d{3}-\\d{2}-\\d{2}$/, 'Phone format 063-123-45-67'),\n});\n\nexport const ContactForm = () => {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContactsItems);\n\n  return (\n    <Formik\n      initialValues={\n        {\n          name: '',\n          number: '',\n        }\n      }\n      validationSchema={Schema}\n      onSubmit={(values, actions) => {\n        if (contacts.some(value => value.name.toLocaleLowerCase() === values.name.toLocaleLowerCase())) {\n          Notiflix.Notify.failure(`${values.name} is already in contacts!`);\n        } else {\n          dispatch(addContact(values));\n        }\n        actions.resetForm();\n      }\n    }\n    >\n    <Form autoComplete='off'>\n      <Label>Name\n        <Input name=\"name\" />\n        <Error name=\"name\" component=\"div\"/>\n      </Label>\n      <Label>Number\n        <Input name=\"number\" type=\"tel\" />\n        <Error name=\"number\" component=\"div\"/>\n      </Label>\n      <Button type=\"submit\">Add contact</Button>\n    </Form>\n    </Formik>\n  )\n};\n","import styled from \"styled-components\";\nimport { AiOutlineDelete } from 'react-icons/ai';\n\nexport const Item = styled.li`\n  position: relative;\n  display: flex;\n  flex-direction: column;\n  justify-content: end;\n  gap: 12px;\n  padding: 12px;\n  overflow: auto;\n  width: calc((100% - 90px) / 6);\n  min-width: 240px;\n  min-height: 280px;\n  border-radius: 6px;\n  background-color: #232323;\n`;\n\nexport const Text = styled.p`\ncolor: #f5f5f575;\nfont-size: 22px;\n`;\n\nexport const Button = styled.button`\nposition: absolute;\nbottom: 12px;\nright: 12px;\ndisplay: flex;\njustify-content: center;\nalign-items: center;\nborder-radius: 50%;\nwidth: 54px;\nheight: 54px;\nborder: 1px solid #ffae009a;\ncolor: #ffae009a;\nbackground-color: transparent;\ntransition: background-color 300ms linear, color 300ms linear;\n:hover, :focus {\n  color: white;\n  background-color: #ffae009a;\n}\n`;\n\nexport const Icon = styled(AiOutlineDelete)`\nfont-size: 34px;\nfill: currentColor;\n`;","import PropTypes from 'prop-types';\nimport { Item, Text, Button, Icon } from './ContactItem.styled';\nimport { useDispatch } from 'react-redux';\nimport { deleteContact } from 'redux/contacts/operations';\n\nexport const ContactItem = ({ item: { name, number, id } }) => {\n  const dispatch = useDispatch();\n\n  return (\n    <Item>\n      <Text>{name}</Text>\n      <Text>{number}</Text>\n      <Button onClick={() => dispatch(deleteContact(id))} type='button'><Icon /></Button>\n    </Item>\n  )\n};\n\nContactItem.propTypes = {\n  item: PropTypes.shape({\n    name: PropTypes.string.isRequired,\n    number: PropTypes.string.isRequired,\n    id: PropTypes.string.isRequired,\n  }).isRequired,\n};","import styled from \"styled-components\";\n\nexport const List = styled.ul`\n  margin-top: 22px;\n  display: flex;\n  flex-wrap: wrap;\n  gap: 18px;\n`;\n\nexport const Title = styled.h2`\n  margin-top: 72px;\n  color: whitesmoke;\n  text-align: center;\n  font-size: 54px;\n`;","import { ContactItem } from \"components/ContactItem/ContactItem\";\nimport { List, Title } from \"./ContactList.styled\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { selectContacts, selectFilteredContacts } from \"redux/contacts/selectors\";\nimport { useEffect } from \"react\";\nimport { fetchContacts } from \"redux/contacts/operations\";\nimport { ProgressBar } from  'react-loader-spinner'\n\nexport const ContactList = () => {\n  const { isLoading, error } = useSelector(selectContacts);\n  const filteredContacts = useSelector(selectFilteredContacts);\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts())\n  }, [dispatch])\n  \n  return (\n    <>\n      {!filteredContacts.length && <Title>Your contact book is empty</Title>}\n      {isLoading ? <ProgressBar /> : <List>\n        {filteredContacts.map(item => {\n          return (\n            <ContactItem key={item.id} item={item}></ContactItem>\n          )\n        })}\n      </List>}\n      {error && <p>{error}</p>}\n    </>\n  )\n};\n","import styled from \"styled-components\";\n\nexport const Input = styled.input`\nwidth: 30%;\npadding: 6px;\nfont-size: 18px;\nborder-radius: 6px;\n`;","import { Label } from \"components/ContactForm/ContactForm.styled\";\nimport { Input } from \"./FindContacts.styled\";\nimport { setFilter } from \"redux/filter/slice\";\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilter } from \"redux/filter/selectors\";\n\nexport const FindContacts = () => {\n  const dispatch = useDispatch();\n  const stateFilter = useSelector(selectFilter);\n\n  return (\n    <Label>\n      Find contacts by name\n      <Input\n        type=\"text\"\n        value={stateFilter}\n        onChange={e => dispatch(setFilter(e.currentTarget.value))}\n      />\n    </Label>\n  )\n};","import styled from \"styled-components\";\n\nexport const Title = styled.h2`\ncolor: whitesmoke;\nfont-size: 42px;\nmargin-bottom: 18px;\n`;","import PropTypes from 'prop-types';\nimport { Title } from \"./Section.styled\";\n\nexport const Section = ({ children, title }) => {\n  return (\n    <section>\n      <Title>{title}</Title>\n      {children}\n    </section>\n  )\n};\n\nSection.propTypes = {\n  title: PropTypes.string.isRequired,\n};","import styled from \"styled-components\";\nimport photo from '../../images/photo.jpeg';\n\nexport const Div = styled.div`\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  padding-top: 224px;\n  padding-bottom: 224px;\n  background-image: linear-gradient(rgba(10,10,10,.7),rgba(10,10,10,.7)),url(${photo});\n  background-repeat: no-repeat;\n  background-size: cover;\n  width: 100%;\n  height: 100%;\n`;\n\nexport const Wrapper = styled.div`\n  padding: 72px;\n  background-color: #000000ee;\n  width: 100%;\n  height: 100%;\n`;\n","import { ContactForm } from \"components/ContactForm/ContactForm\";\nimport { ContactList } from \"components/ContactList/ContactList\";\nimport { FindContacts } from \"components/FindContacts/FindContacts\";\nimport { Section } from \"components/Section/Section\";\nimport { Div, Wrapper } from \"./Contacts.styled\";\n\nconst Contacts = () => {\n  return (\n    <>\n      <Div>\n        <Section title=\"Add a contact to the contact book\">\n          <ContactForm />\n        </Section>\n      </Div>\n      <Wrapper>\n        <Section title=\"Contacts list\">\n          <FindContacts />\n          <ContactList />\n        </Section>\n      </Wrapper>\n    </>\n  )\n};\n\nexport default Contacts"],"names":["Form","styled","FormikForm","Label","Input","FormikField","Button","Error","ErrorMessage","selectFilter","state","filter","selectContacts","contacts","selectContactsItems","items","selectFilteredContacts","createSelector","item","name","toLowerCase","includes","Schema","Yup","min","max","required","number","matches","ContactForm","dispatch","useDispatch","useSelector","initialValues","validationSchema","onSubmit","values","actions","some","value","toLocaleLowerCase","Notiflix","addContact","resetForm","autoComplete","component","type","Item","Text","Icon","AiOutlineDelete","ContactItem","id","onClick","deleteContact","List","Title","ContactList","isLoading","error","filteredContacts","useEffect","fetchContacts","length","map","FindContacts","stateFilter","onChange","e","setFilter","currentTarget","Section","children","title","Div","photo","Wrapper"],"sourceRoot":""}